#!/usr/bin/env python
"""
Convert a latex document to rst.

Usage:

  latex2rst filename.tex > filename.rst

or equivalently

  latex2rst -s filename.tex

You may still need to edit the rst file by hand to fix little things, but most
of the equations should be correctly converted.

"""

from textwrap import fill
import os
import re
from optparse import OptionParser

def repl1(obj):
    eq = obj.group(1)
    eq = eq.replace("\n", " ")
    eq = fill(eq, 100000)
    return "\n.. math::\n\n    %s\n" % eq
def repl6(obj):
    eq = obj.group(1)
    eq = eq.replace("\n", " ")
    eq = fill(eq, 100000)
    return "\n.. math::\n    :nowrap:\n\n    %s\n" % eq
def repl4(obj):
    eq = obj.group(1)
    label = obj.group(2)
    eq = eq.replace("\n", " ")
    eq = fill(eq, 100000)
    return "\n.. math::\n    :label: %s\n\n    %s\n" % (label, eq)

def repl_chapter(obj):
    title = obj.group(1)
    return "%s\n%s\n" % (title, "="*len(title))
def repl_section(obj):
    title = obj.group(1)
    return "%s\n%s\n" % (title, "-"*len(title))
def repl_subsection(obj):
    title = obj.group(1)
    return "%s\n%s\n" % (title, "~"*len(title))
def repl_subsubsection(obj):
    title = obj.group(1)
    return "%s\n%s\n" % (title, "^"*len(title))

def main():
    parser = OptionParser(usage="[options] args")
    parser.add_option("-s", "--save", dest="save", action="store_true",
            default=False, help="Save the output to a .rst file")
    options, args = parser.parse_args()
    if len(args) != 1:
        parser.print_help()
        return

    custom_definitions = {
            r"(?<!\\def)\\be(?=[^\w])": r"\\begin{equation}",
            r"(?<!\\def)\\ee(?=[^\w])": r"\\end{equation}",
            r"(?<!\\def)\\ba(?=[^\w])": r"\\begin{array}",
            r"(?<!\\def)\\ea(?=[^\w])": r"\\end{array}",
            r"(?ms)\\left\((\\mat{.+?})\\right\)": r"\1",
            r"\(\\ref{(.+?)}\)": r":eq:`\1`",
            }

    filename = args[0]
    s = open(filename).read()

    # convert user defined things (you might want to add your own custom
    # defintions into custom_definitions):
    for pattern in custom_definitions:
        s = re.sub(pattern, custom_definitions[pattern], s)

    # convert equations:
    s = re.sub("(?ms)\$\$(.+?)\$\$", repl1, s)
    s = re.sub(r"(?ms)\\begin{equation\*}(.+?)\\end{equation\*}", repl1, s)
    s = re.sub(r"(?ms)(\\begin{eqnarray\*}.+?\\end{eqnarray\*})", repl6, s)
    s = re.sub(r"(?ms)\\begin{equation}(.*?)\\label{(.+?)}(.+?)\\end{equation}",
            repl4, s)

    # convert titles:
    s = re.sub(r"\\chapter{(.+)}", repl_chapter, s)
    s = re.sub(r"\\section\*?{(.+)}", repl_section, s)
    s = re.sub(r"\\subsection\*?{(.+)}", repl_subsection, s)
    s = re.sub(r"\\subsubsection\*?{(.+)}", repl_subsubsection, s)

    # either save to a file or dump to stdout:
    if options.save:
        outfile = os.path.splitext(filename)[0] + ".rst"
        open(outfile, "w").write(s)
    else:
        print s

if __name__ == '__main__':
    main()
